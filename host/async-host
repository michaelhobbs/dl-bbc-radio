#!/usr/bin/python3 -u

# Note that running python with the `-u` flag is required on Windows,
# in order to ensure that stdin and stdout are opened in binary, rather
# than text, mode.

import json
import sys
import struct

# Read a message from stdin and decode it.
def get_message():
    raw_length = sys.stdin.buffer.read(4)

    if not raw_length:
        sys.exit(0)
    message_length = struct.unpack('=I', raw_length)[0]
    message = sys.stdin.buffer.read(message_length).decode("utf-8")
    return json.loads(message)

# Encode a message for transmission, given its content.
def encode_message(message_content):
    encoded_content = json.dumps(str(message_content)).encode("utf-8")
    encoded_length = struct.pack('=I', len(encoded_content))
    #  use struct.pack("10s", bytes), to pack a string of the length of 10 characters
    return {'length': encoded_length, 'content': struct.pack(str(len(encoded_content))+"s",encoded_content)}

# Send an encoded message to stdout.
def send_message(encoded_message):
    sys.stdout.buffer.write(encoded_message['length'])
    sys.stdout.buffer.write(encoded_message['content'])
    sys.stdout.buffer.flush()


import subprocess
import asyncio

async def coro(process):
    return await process.stdout.readline()

# Sends process's stdout to extension
async def send_process_messages(process):
    while True:
        try:
            output = await asyncio.wait_for(coro(process), timeout=1.0)
            send_message(encode_message(output.strip()))
        except asyncio.TimeoutError:
            #process.stdout.flush()
            output = await process.stdout.read()
            print('timeout!')
            print(output)
        # output =  process.stdout.readline()

        # Do something else
        return_code = process.returncode
        #print('returncode: ' + str(return_code))
        #if return_code is not None:
            #for output in process.stdout.readlines():
            #    send_message(encode_message(output.strip()))
        #    break

# Trigger recording for pid
async def record_pid(pid):
    return await asyncio.create_subprocess_shell('get_iplayer --force --overwrite --pid=' + pid,
        stdout=asyncio.subprocess.PIPE,
        universal_newlines=False)

# Test process to ping pyhton.org
def ping():
    return subprocess.Popen(['ping', '-c 4', 'python.org'],
        stdout=subprocess.PIPE,
        universal_newlines=True)

# Validate message matches application's interface
def validate_message(json_message):
    if 'pid' in json_message:
        return
    send_message(encode_message("Error: pid missing"))
    sys.exit(0)

# Verify system has required commands installed
def system_check():
    return True # TODO

system_check()
# async def test():
#     await send_process_messages(await record_pid('m000pyb4'))
# asyncio.run(test())

async def execCmd(cmd):
    await send_process_messages(await record_pid(message['cmd']))
# Await command message
while True:
    message = get_message()
    if "ping" in str(message):
        process = ping()
        send_process_messages(process)
    validate_message(message)
    asyncio.run(execCmd(message))